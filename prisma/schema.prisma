// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  users_Apps        UsersApps[]
  users_wishlist    UsersWishlist[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UsersApps {
  user_id     String
  steam_id    Int
  users       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  apps        Apps      @relation(fields: [steam_id], references: [steam_id], onDelete: Cascade)

  @@id([user_id, steam_id])
}

model UsersWishlist {
  user_id     String
  steam_id    Int
  users       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  apps        Apps      @relation(fields: [steam_id], references: [steam_id], onDelete: Cascade)

  @@id([user_id, steam_id])
}

model Apps {
  id                      Int       @id @default(autoincrement())
  steam_id                Int       @unique
  dlc_steam_id            Int?
  title                   String?
  type                    String
  total_reviews           Int?
  total_positive_reviews  Int?
  last_modified           Int
  price_change_number     Int
  updated_at              DateTime
  created_at              DateTime  @default(now())
  app_info                App_Info?
  releasedate             ReleaseDate?
  prices                  Prices[]
  apps_tags               Apps_Tags[]
  apps_developers         Apps_Developers[]
  apps_publishers         Apps_Publishers[]
  users_apps              UsersApps[]
  users_wishlist          UsersWishlist[]
  top_sellers             TopSellers?
  most_played             MostPlayed?
  screenshots             Screenshots[]
  videos                  Videos[]
  app                     Apps?     @relation("Appa_Dlcs", fields: [dlc_steam_id], references: [steam_id])
  dlc                     Apps[]    @relation("Appa_Dlcs")
}

model Screenshots {
  id                Int       @id @default(autoincrement())
  steam_id          Int
  image_order       Int
  path_thumbnail    String
  path_full         String
  app               Apps      @relation(fields: [steam_id], references: [steam_id], onDelete: Cascade)

  @@unique([steam_id, image_order])
}

model Videos {
  id                Int       @id @default(autoincrement())
  steam_id          Int
  video_id          Int       @unique
  video_name        String
  app               Apps      @relation(fields: [steam_id], references: [steam_id], onDelete: Cascade)
}

model ReleaseDate {
  id            Int       @id @default(autoincrement())
  steam_id      Int       @unique
  coming_soon   Boolean
  release_date  String
  app           Apps      @relation(fields: [steam_id], references: [steam_id], onDelete: Cascade)
}

model App_Info {
  id                      Int       @id @default(autoincrement())
  steam_id                Int       @unique
  description             String?
  short_description       String?
  is_mature               Boolean?
  updated_at              DateTime
  created_at              DateTime  @default(now())
  app                     Apps      @relation(fields: [steam_id], references: [steam_id], onDelete: Cascade)
}

model Prices {
  id                Int     @id @default(autoincrement())
  steam_id          Int
  is_free           Boolean?
  currency          String?
  original_price    Int?
  discount_price    Int?
  valid_from        DateTime  @default(now())
  valid_to          DateTime
  app               Apps     @relation(fields: [steam_id], references: [steam_id], onDelete: Cascade)
}

model Tags {
  id            Int       @id @default(autoincrement())
  tag_id        Int       @unique
  tag_name      String    @unique
  apps_tags     Apps_Tags[]
}

model Apps_Tags {
  steam_id      Int
  tag_id        Int
  tags          Tags      @relation(fields: [tag_id], references: [tag_id], onDelete: Cascade)
  apps          Apps      @relation(fields: [steam_id], references: [steam_id], onDelete: Cascade)

  @@id([steam_id, tag_id])
}

model Developers {
  id              Int       @id @default(autoincrement())
  developer_name  String    @unique
  apps_developers Apps_Developers[]
}

model Apps_Developers {
  developer_id    Int
  steam_id        Int
  developers      Developers  @relation(fields: [developer_id], references: [id], onDelete: Cascade)
  apps            Apps        @relation(fields: [steam_id], references: [steam_id], onDelete: Cascade)

  @@id([developer_id, steam_id])
}

model Publishers {
  id              Int       @id @default(autoincrement())
  publisher_name  String    @unique
  apps_publishers Apps_Publishers[]
}

model Apps_Publishers {
  publisher_id    Int
  steam_id        Int
  publisher       Publishers  @relation(fields: [publisher_id], references: [id], onDelete: Cascade)
  apps            Apps        @relation(fields: [steam_id], references: [steam_id], onDelete: Cascade)

  @@id([publisher_id, steam_id])
}

model TopSellers {
  steam_id      Int       @id @unique
  app_order     Int
  updated_at    DateTime
  apps          Apps      @relation(fields: [steam_id], references: [steam_id])
}

model MostPlayed {
  steam_id      Int       @id @unique
  app_order     Int
  current       Int
  peak          Int
  updated_at    DateTime
  apps          Apps      @relation(fields: [steam_id], references: [steam_id])
}